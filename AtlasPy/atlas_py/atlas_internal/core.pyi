from __future__ import annotations
import atlas_internal.ast
import numpy
import typing

__all__ = [
    "Allocator",
    "CommisionManager",
    "Exchange",
    "Hydra",
    "Measure",
    "MetaStrategy",
    "NLVMeasure",
    "Order",
    "Strategy",
    "Trade",
    "VolatilityMeasure",
    "WeightMeasure",
]

class Allocator:
    def enableMeasure(self, arg0: atlas_internal.ast.TracerType) -> None: ...
    def getAllocationBuffer(self) -> numpy.ndarray[numpy.float64[m, 1]]: ...
    def getMeasure(self, arg0: atlas_internal.ast.TracerType) -> Measure | None: ...
    def getNLV(self) -> float: ...
    def getName(self) -> str: ...
    def getTracer(self) -> atlas_internal.ast.Tracer: ...
    def setVolMeasure(self, arg0: atlas_internal.ast.CovarianceNodeBase) -> None: ...

class CommisionManager:
    def setCommissionPct(self, arg0: float) -> None: ...
    def setFixedCommission(self, arg0: float) -> None: ...

class Exchange:
    def enableNodeCache(
        self, arg0: str, arg1: atlas_internal.ast.StrategyBufferOpNode, arg2: bool
    ) -> None: ...
    def getAssetIndex(self, arg0: str) -> int | None: ...
    def getAssetMap(self) -> dict[str, int]: ...
    def getCovarianceNode(self, arg0: str, arg1: ..., arg2: int, arg3: ...) -> ...: ...
    def getCurrentTimestamp(self) -> int: ...
    def getMarketReturns(
        self, row_offset: int = 0
    ) -> numpy.ndarray[numpy.float64[m, 1], numpy.ndarray.flags.writeable]: ...
    def getName(self) -> str:
        """
        get unique id of the exchange
        """

    def getObserver(self, arg0: str) -> ... | None: ...
    def getTimestamps(self) -> list[int]: ...
    def registerModel(self, arg0: ...) -> None: ...
    def registerObserver(self, arg0: ...) -> ...: ...

class Hydra:
    def __init__(self) -> None: ...
    def addExchange(
        self, name: str, source: str, datetime_format: str | None = None
    ) -> ...: ...
    def addStrategy(self, strategy: ..., replace_if_exists: bool = False) -> ...: ...
    def build(self) -> None: ...
    def getExchange(self, arg0: str) -> ...: ...
    def getStrategy(self, arg0: str) -> ... | None: ...
    def removeStrategy(self, arg0: str) -> None: ...
    def reset(self) -> None: ...
    def run(self) -> None: ...
    def step(self) -> None: ...

class Measure:
    def getValues(self) -> numpy.ndarray[numpy.float64[m, n]]: ...

class MetaStrategy(Allocator):
    def __init__(
        self, arg0: str, arg1: Exchange, arg2: Allocator | None, arg3: float
    ) -> None: ...
    def addStrategy(self, arg0: Allocator, arg1: bool) -> Allocator: ...

class NLVMeasure(Measure):
    pass

class Order:
    def __init__(
        self, arg0: int, arg1: int, arg2: int, arg3: float, arg4: float
    ) -> None: ...
    def to_dict(self) -> dict: ...
    @property
    def asset_id(self) -> int: ...
    @property
    def fill_price(self) -> float: ...
    @property
    def fill_time(self) -> int: ...
    @property
    def quantity(self) -> float: ...
    @property
    def strategy_id(self) -> int: ...

class Strategy(Allocator):
    def __init__(
        self, arg0: str, arg1: Exchange, arg2: Allocator, arg3: float
    ) -> None: ...
    def initCommissionManager(self) -> CommisionManager: ...
    def loadAST(self) -> atlas_internal.ast.StrategyNode: ...
    def setGridDimmensions(
        self,
        dimensions: tuple[..., ...],
        grid_type: atlas_internal.ast.GridType | None = None,
    ) -> atlas_internal.ast.StrategyGrid: ...

class Trade:
    def __init__(
        self,
        arg0: int,
        arg1: int,
        arg2: int,
        arg3: int,
        arg4: float,
        arg5: float,
        arg6: float,
    ) -> None: ...
    def to_dict(self) -> dict: ...
    @property
    def asset_id(self) -> int: ...
    @property
    def close_price(self) -> float: ...
    @property
    def close_time(self) -> int: ...
    @property
    def open_price(self) -> float: ...
    @property
    def open_time(self) -> int: ...
    @property
    def quantity(self) -> float: ...
    @property
    def strategy_id(self) -> int: ...

class VolatilityMeasure(Measure):
    pass

class WeightMeasure(Measure):
    pass
